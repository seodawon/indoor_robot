amcl:
  ros__parameters:
    use_sim_time: True # 시뮬레이션 시간 사용 여부 설정
    # 로봇의 모션 모델에서 사용되는 노이즈 조절
    alpha1: 0.1 #alpha1: 로봇의 회전 운동 모델에 대한 노이즈. 
                #로봇이 회전할 때 예측 오차. 값이 높을수록 노이즈 큼.
    alpha2: 0.1 #alpha2: 로봇의 직진 운동 모델이 대한 노이즈. 
                #로봇이 직진할 때 예측 오차. 값이 높을수록 노이즈 큼.
    alpha3: 0.05 #alpha3: 로봇의 회전 운동 모델에 대한 노이즈. 
                  #로봇이 회전할 때 측정된 회전량에 대한 오차. 값이 클수록 노이즈 큼.
    alpha4: 0.01 #alpha4: 로봇의 직진 운동 모델에 대한 노이즈. 
                  #로봇이 직진할 때 측정된 이동량에 대한 오차. 값이 클수록 노이즈 큼.
    alpha5: 0.04 #alpha5: 로봇의 회전 운동 모델에 대한 노이즈. 
                  #로봇이 회전할 때 측정된 화전량에 대한 비선형성. 값이 클수록 노이즈 큼.
    base_frame_id: "base_link"
    #빔 스킴은 로봇의 이동거리에 비례하여 일부 센서데이터를 건너 뛰고 처리
    # AMCL의 빔 스키빙 설정
    beam_skip_distance: 0.5 #이 거리 이상의 이동이 감지되면 빔 스킵을 활성화  
    #라이다를 통한 빔이 너무 많이 틀어졌을때 무시하는 기능
    beam_skip_error_threshold: 0.9 #로봇의 예상 이동과 실제 이동 사이의 오차가 임계값을 초과하면 빔 스킵을 활성화.
    beam_skip_threshold: 0.3 #빔 스킵을 적용할 빔의 신뢰도 임계값. 신뢰도가 임계값보다 작으면 해당 빔 스킵.
    do_beamskip: false #빔 스키빙 기능 사용 여부
    global_frame_id: "map" 
    map_topic: map
    lambda_short: 0.1 #짧은 범위의 측정 모델에서 사용되는 람다 파라미터
    #로봇마다 다른 라이다 센서의 하드웨어 스펙에 따라 달라지므로 중요 단위 : 미터
    laser_likelihood_max_dist: 2.5 #이 거리보다 먼 라이다 데이터는 위치추정에 사용하지 않는다
    laser_max_range: 16.0 #라이다 센서가 감지할 수 있는 최대 거리.
    laser_min_range: 0.1 #라이다 센서가 감지할 수 있는 최소 거리
    #laser_model_type: {'"likelihood_field"' or '"beam"'}. likelihood_field는 
    #확률필드를 바탕으로 로봇 위치 추정. beam은 레이저빔의 거리 데이터를 직접 사용하여 위치 추정.
    laser_model_type: "likelihood_field" #레이저 모델 타입 설정
    #입자수를 증가시키면 로봇의 위치 추정이 더 정확해지나 계산비용이 증가.
    #입자수를 감소시키면 로봇의 위치 추정의 정확도 감소하나 계산비용이 낮아짐.
    #빔이란 라이다 센서에서 출력하는 레이저 빔의 개념.
    #입자란 로봇의 가능한 위치를 대표하는 작은 구성 요소들로써 위치와 방향정보 포함.
    max_beams: 60 #AMCL이 사용되는 최대 레이저 빔의 수를 설정
    max_particles: 2000 #AMCL이 사용할 파티클 필터의 최대 및 최소 파티클 수 설정
    min_particles: 500
    odom_frame_id: "odom"
    pf_err: 0.02 # 입자 필터의 위치추정 오차. 낮으면 위치 추정 정확도 높아지긴 하나 계산비용도 높아짐
    pf_z: 0.85 #입자필터의 재샘플링 가중치. 높은 값일수록 입자 중요도에 따른 재샘플링이 더 강조됨.
    recovery_alpha_fast: 0.0 #빠른 회복 모드에서 사용하는 값. 회복 모드는 위치 추정에 문제가 있을 때 로봇이 회복하는 방법을 지정.
    recovery_alpha_slow: 0.0 #느린 회복 모드에서 사용하는 회복 알파 값.
    resample_interval: 1 #파티클 필터의 리샘플링 간격을 설정 입자에서 재 샘플링을 수행하는 간격
    robot_model_type: "nav2_amcl::DifferentialMotionModel" #diffential도 가능
    save_pose_rate: 0.5 # 로봇 위치추정 결과를 저장하는 비율.
    sigma_hit: 0.02 #레이저 스캐너에서의 측정값과 예상값 사이의 표준 편차.
    tf_broadcast: false # 위치 추정 결과를 TF메세지로 전송할지 여부.
    transform_tolerance: 1.0 #TF 변환에 대한 허용 오차.
    update_min_a: 0.06 #로봇의 각도 변화가 일정 값보다 큰 경우 위치 추정 수행.
    update_min_d: 0.025 #로봇의 이동변화가 일정 값보다 큰 경우 위치 추정을 수행.
    z_hit: 0.7 #레이저 센서 모델의 확률 분포와 관련된 파라미터 /레이저 모델의 가중치에 사용되는 값.
    z_max: 0.05
    z_rand: 0.059
    z_short: 0.05
    scan_topic: scan

    #Initial Pose
    set_initial_pose: True #초기 위치 설정 여부를 결정
    initial_pose.x: 0.0 # 초기 위치와 방향을 설정
    initial_pose.y: 0.0
    initial_pose.z: 0.0
    initial_pose.yaw: 0.0

amcl_map_client:
  ros__parameters:
    use_sim_time: True

amcl_rclcpp_node:
  ros__parameters:
    use_sim_time: True

#행동 트리는 일단 주석하고 사용 
bt_navigator:
  ros__parameters:
    use_sim_time: True
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom
    bt_loop_duration: 10 # 행동 트리의 루프 시간 설정
    default_server_timeout: 20 # 기본 서버 타임 아웃 시간 설정
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    plugin_lib_names: #행동 트리에서 사용되는 플러그인 라이브러리 목록을 설정
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_compute_path_through_poses_action_bt_node
    - nav2_smooth_path_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_drive_on_heading_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_globally_updated_goal_condition_bt_node
    - nav2_is_path_valid_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_truncate_path_action_bt_node
    - nav2_truncate_path_local_action_bt_node
    - nav2_goal_updater_node_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_path_expiring_timer_condition
    - nav2_distance_traveled_condition_bt_node
    - nav2_single_trigger_bt_node
    # - nav2_goal_updated_controller_bt_node
    - nav2_is_battery_low_condition_bt_node
    - nav2_navigate_through_poses_action_bt_node
    - nav2_navigate_to_pose_action_bt_node
    - nav2_remove_passed_goals_action_bt_node
    - nav2_planner_selector_bt_node
    - nav2_controller_selector_bt_node
    - nav2_goal_checker_selector_bt_node
    - nav2_controller_cancel_bt_node
    - nav2_path_longer_on_approach_bt_node
    - nav2_wait_cancel_bt_node
    - nav2_spin_cancel_bt_node
    - nav2_back_up_cancel_bt_node
    - nav2_drive_on_heading_cancel_bt_node
bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: True

controller_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 20.0 # 컨트롤러 주파수 설정 일반적으로 20~30 사용
    #x_velocity는 diff type의 로봇 진행 방향으로의 속도이므로 threshold값을 작게 준다. (신뢰성)
    min_x_velocity_threshold: 0.001 # 최소 속도 임계값을 설정 /controller server가 controller에서 로봇의 현재 속도를 줄 때의 필터링 하는 임계값
    min_y_velocity_threshold: 0.5 #y_velocity는 diff type에선 있을 수 없으므로 x_velocity보단 크게 준다. (noise라 생각)
    min_theta_velocity_threshold: 0.001 #각속도 
    failure_tolerance: 0.3 ##로봇이 목표 지점에 도달하지 못했을 때 허용되는 거리 좀 더 정밀한 제어를 위한다면 더 작은 값으로 세팅
    progress_checker_plugin: "progress_checker" #진행 상태를 확인하기 위해 사용되는 플러그인.
    goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.3
      movement_time_allowance: 15.0
    # Goal checker parameters
    # precise_goal_checker:
    #  plugin: "nav2_controller::SimpleGoalChecker"
    #  xy_goal_tolerance: 0.25
    #  yaw_goal_tolerance: 0.25
    #  stateful: True
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.4 # 좌표상으로 목표지점에 도착했는지 오차 범위 설정
      yaw_goal_tolerance: 999.0 # 헤딩 앵글을 바탕으로 목표 지점에 도착했는지 오차 범위 설정
    # DWB parameters 기본 단위 : m/s => 최대/최소 몇의 속도/각속도 가능한가? 줄어드는 범위와 늘어나는 범위는 몇 정도가 적당한가? 어떻게 속도값을 보내줄것인가?
    FollowPath: # 실질적으로 로봇에게 속도 값을 주는 부분으로 속도 범위 설정
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True
      min_vel_x: 0.0 # x축(전진/후진) 방향으로 로봇이 가질 수 있는 최소 속도를 설정/ 우리는 후진을 못하므로 0
      min_vel_y: 0.0 #y축(측면) 방향으로 로봇이 가질 수 있는 최소 속도를 설정 / 우리는 측면 이동 못하므로 0
      max_vel_x: 0.2 #x축 방향으로 로봇이 가질 수 있는 최대 속도를 설정 / 우선은 1.0 m/s 로 설정 
      max_vel_y: 0.0 #y축 방향으로 로봇이 가질 수 있는 최대 속도를 설정 / 우리는 측면 이동 못하므로 0
      max_vel_theta: 0.0 #로봇의 회전 방향(θ축)으로 가질 수 있는 최대 각속도 /  우선은 1.5 rad/s 로 설정
      min_speed_xy: 0.0 #x축 및 y축 방향에서의 최소 합성 속도를 설정 / 멈췄을때 0이어야함
      max_speed_xy: 0.2 # x축 및 y축 방향에서의 최대 합성 속도를 설정 / 우리는 x가 최대 값일떄 1이므로 1로 설정 => 추후 변경 (max_vel_x와 동일)
      min_speed_theta: 0.0 #회전 방향(θ축)에서의 최소 속도를 설정 / 직진할때 각속도가 주어지면 안되므로 0으로 세팅
      # Add high threshold velocity for turtlebot 3 issue.
      # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
      acc_lim_x: 0.2 #x축 방향에서의 최대 가속도를 설정 / 우리가 가속할 수 있는 범위 정해야함 
      acc_lim_y: 0.0 # y축 방향에서의 최대 가속도를 설정 / y 는 사용 안함
      acc_lim_theta: 0.0 #θ축 방향에서의 최대 가속도를 설정 / 우리꺼에 맞춰서 조절 1/3 
      decel_lim_x: 0.0 #x축 방향에서의 최대 감속도를 설정/ 
      decel_lim_y: 0.0 #y축 방향에서의 최대 감속도를 설정 /우리는 측면으로 이동 안함 고정
      decel_lim_theta: 0.0 #θ축 방향에서의 최대  감속도를 설정 / 우리꺼에 맞춰서 조절
      vx_samples: 10 # x축 방향에서의 속도 샘플 개수를 설정. 20개의 속도 후보를 생성하여 평가 / 우리가 속도를 실시간으로 줘야하네?
      vy_samples: 0 # 축 방향에서의 속도 샘플 개수를 설정 / 0으로 고정
      vtheta_samples: 20 # θ축 방향에서의 속도 샘플 개수를 설정 / 각속도를 따로 줘야하네?
      sim_time: 1.7 # 경로를 예측하기 위해 시뮬레이션할 시간(초)을 설정. 여기서는 1.7초 동안 경로 시뮬레이션
      # granularity 높을수록 이동경로가 세분화 되어 부드럽고 정교한 이동이 이뤄짐 하지만 계산비용 증가
      linear_granularity: 0.05 # 경로를 세분화할 때 사용하는 선형 간격을 설정
      angular_granularity: 0.025 # 경로를 세분화할 때 사용하는 각도 간격
      transform_tolerance: 0.1 # 변환 시 허용되는 오차를 설정
      xy_goal_tolerance: 0.25 # 로봇이 목표 지점에 도달했다고 간주되는 x, y축 방향의 허용 오차를 설정
      trans_stopped_velocity: 0.01 # 로봇이 정지상태로 간주되는 선속도 / 0.25 m/s 이하일 때 정지 상태로 간주 => 낮춰야함
      short_circuit_trajectory_evaluation: True #최적화 중인 경로가 현재까지 최적 경로보다 나쁘다고 판단되면 조기 중단
      stateful: True # 이 설정은 플래너가 이전 상태를 기억하고 이를 기반으로 다음 상태를 결정하도록 함
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.04 # 장애물 회피를 위한 가중치 /값이 작아 장애물 회피보다는 경로 준수를 더 중시
      PathAlign.scale: 50.0 #32 # 로봇이 경로에 얼마나 잘 맞춰서 이동하는지를 평가하는 가중치
      PathAlign.forward_point_distance: 0.1 # 경로 정렬 평가 시 참조하는 지점의 전방 거리  m 단위
      GoalAlign.scale: 10.0 #24 # 목표 지점에 대해 얼마나 잘 정렬되었는지를 평가하는 가중치
      GoalAlign.forward_point_distance: 0.1 #목표 정렬 평가 시 참조하는 지점의 전방 거리 m 단위
      PathDist.scale: 50.0 #32 # 경로와의 거리에 따라 평가하는 가중치
      GoalDist.scale: 10.0 #24 # 목표 지점까지의 거리에 따라 평가하는 가중치
      RotateToGoal.scale: 32.0  # 목표 지점에 대한 회전 조정을 평가하는 가중치
      RotateToGoal.slowing_factor: 5.0 # 목표에 가까워질수록 회전 속도를 줄이는 요소
      RotateToGoal.lookahead_time: -1.0 # 목표 지점에 도달하기 전에 미리 회전하도록 유도하도록 시간 설정

controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: True

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 10.0 #단위 : HZ
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: True
      rolling_window: true # 로컬 비용 지도가 움직임에 따라 업데이트되도록 설정. 로봇의 움직임에 맞춰 비용 지도 창이 이동
      width: 3 #코스트맵의 크기 및 해상도를 설정 /단위 : m
      height: 3
      resolution: 0.05 #1셀(cell)이 0.05 미터를 나타냄 => 값이 높을 수록 많은 메모리와 계산 비용 증가
      robot_radius: 0.20 #로봇의 반경 설정 /로봇의 크기를 나타내며, 충돌 회피 및 경로 계획에서 사용
      plugins: ["stvl_layer" ,"inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 1.0 #인플레이션 레이어에서 사용되는 비용 확장 계수 / 값이 클수록 장애물 주변의 비용이 빠르게 증가
        inflation_radius: 0.3 #로봇 중심으로 주변 장애물에 대해 인플레이션. 로봇 반경 주변으로 장애물과의 접촉 반경. /로봇 중심으로부터 0.55미터 내에 있는 장애물은 점진적으로 높은 비용이 할당
      stvl_layer:
          plugin: "spatio_temporal_voxel_layer/SpatioTemporalVoxelLayer" # Foxy 이후 버전에서 사용 가능
          enabled: true # 레이어의 활성 여부       
          voxel_decay: 1.0 # 시간이 지남에 따라 장애물로 간주되지 않는 셀의 비용이 감소하는 비율 설정 -> 1.0이면 1초에 한 번 비용
          decay_model: 0 # 비용 감소의 모델 지정 -> 0은 기본 모델
          voxel_size: 0.05 # 각각의 3D 셀의 크기 설정
          track_unknown_space: true # 알려지지 않은 공간을 추적할지 여부 결졍
          unknown_threshold: 15 # 셀을 알려지지 않은 것으로 간주하는 데 필요한 조건 설정
          mark_threshold: 0 # 장애물로 마킹하기 위해 필요한 포인트 수 설정
          # update_footprint_enabled: true # 로봇의 footprint가 업데이트될 때 레이어도 업데이트할지 여부 설정
          combination_method: 1 # 비용 맵을 결합하는 방법 설정 -> 1은 최대값을 사용해 결합하는 방식
          origin_z: 0.0 # 레이어의 시작 Z 좌표
          publish_voxel_map: true # 이 레이어의 Voxel 맵을 퍼블리시할지 여부 설정
          transform_tolerance: 0.1 # 좌표 변환을 허용하는 오차 시간
          mapping_mode: false # 이 레이어가 mapping 모드에서 동작할지 여부 결정
          map_save_duration: 60.0 # 맵이 저장되는 주기 
          observation_sources: rgbd1_mark rgbd1_clear # 장애물과 클리어링 데이터를 제공하는 소스 나열 -> rgbd1_mark와 rgbd1_clear 사용
          rgbd1_mark:
            data_type: PointCloud2 # PointCloud2 형식의 데이터 사용
            topic: /scan_3D # 데이터 수신 토픽
            marking: true # 장애물 마킹
            clearing: false # 클리어링 작업
            obstacle_range: 2.0 # 장애물로 인식할 수 있는 최대 거리 설정
            min_obstacle_height: 0.0 # 장애물의 최소 높이
            max_obstacle_height: 10.0 # 장애물의 최대 높이 
            expected_update_rate: 0.0 # 데이터가 갱신될 최소 주기 설정 -> 0.0은 갱신 주기의 제한 X
            observation_persistence: 0.0 # 장애물 관측 지속 시간 -> 0.0이면 최신 측정값만 사용
            inf_is_valid: false # false -> 무한대 값이 포함된 데이터를 유효하지 않다고 간주
            filter: "voxel" # voxel 필터를 사용하여 데이터를 필터링 -> 공간 내에서 보다 정확한 장애물 데이터를 제공하기 위한 필터
            voxel_min_points: 0 # 필터링할 때 각 Voxel에 최소한 몇 개의 포인트가 있어야 하는지 설정 -> 0으로 설정하면 제한 x
            clear_after_reading: true # 데이터를 읽은 후 버퍼를 지울지 여부 설정
          rgbd1_clear:
            enabled: true # 클리어링 작업이 활성화
            data_type: PointCloud2 # PointCloud 형식의 데이터 사용
            topic: /scan_3D # 토픽 '/scan_3D' 데이터를 수신
            marking: false # false -> 장애물을 마킹 X
            clearing: true # true로 설정되어 있어 장애물을 클리어링
            max_z: 8.0 # 클리어링할 장애물의 Z축의 최소 범위 설정
            min_z: 1.0 # 클리어링할 장애물의 Z축의 최대 범위 설정
            vertical_fov_angle: 0.6 # 수직 FOV 각도 설정
            vertical_fov_padding: 0.05 # 3D LiDAR의 경우 수직 FOV에 추가 패딩 적용
            horizontal_fov_angle: 6.29 # 수평 FOV를 360도에 해당하는 6.29 라디안으로 설정
            decay_acceleration: 5.0 # 비용 감소의 가속도 설정 -> 5.0으로 빠르게 비용 감소
            model_type: 1 # 모델 타입 지정 -> 1: 3D LiDAR를 의미
      static_layer:
        map_subscribe_transient_local: True
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 10.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
          
      always_send_full_costmap: True
      
  local_costmap_client:
    ros__parameters:
      use_sim_time: True
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: True 

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0 # 글로벌 코스트맵의 업데이트 주파수
      publish_frequency: 1.0 # 코스트맵 게시 주파수
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: true
      robot_radius: 0.05 # 로봇 반경
      resolution: 0.05 # 해상도
      track_unknown_space: true # 알려지지 않은 공간 추적 여부
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]

      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True

      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: true
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: true
          marking: true
          data_type: "LaserScan"
          raytrace_max_range: 10.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0

      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.3

      always_send_full_costmap: True

  global_costmap_client:
    ros__parameters:
      use_sim_time: true

  global_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: true

map_server:
  ros__parameters:
    use_sim_time: True
    yaml_filename: "finalmap4.yaml"

map_saver:
  ros__parameters:
    use_sim_time: True
    save_map_timeout: 5.0 # 맵 저장 타임아웃 시간을 설정
    free_thresh_default: 0.25 # 자유 및 점유 공간의 임계값을 설정
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0 # 플래너의 예상 주파수 설정
    use_sim_time: True
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 0.5
      use_astar: true #true: A* planner사용/false: wavefront Dijkstra planner 사용
      allow_unknown: true

planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: True

smoother_server:
  ros__parameters:
    use_sim_time: True
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    # footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0 #5.0 #행동 서버의 주기적 빈도 설정
    behavior_plugins: ["spin", "backup", "drive_on_heading", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
    global_frame: odom
    robot_base_frame: base_link
    transform_tolerance: 0.1 #0.2
    use_sim_time: true
    simulate_ahead_time: 2.0
    max_rotational_vel: 0.3 #1.0
    min_rotational_vel: 0.05 #0.4
    rotational_acc_lim: 0.3 #3.2

robot_state_publisher:
  ros__parameters:
    use_sim_time: true

waypoint_follower:
  ros__parameters:
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "input_at_waypoint"   
    input_at_waypoint:
      plugin: "nav2_waypoint_follower::InputAtWaypoint"
      enabled: True
      timeout: 5.0 #s
      input_topic: "input_at_waypoint/input" #Empty
       # 경유지에 도착하면 10초동안 사용자의 입력을 기다렸다가, 시간이 되면 입력이 들어오지 않아도 다음 경유지로 이동하거나 특정행위를 수행